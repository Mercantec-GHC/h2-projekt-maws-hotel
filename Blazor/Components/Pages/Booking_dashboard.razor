@page "/booking_dashboard"
@inject Blazor.Services.DatabaseService db
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

@using DomainModels
@inject AppState AppState
@inject HttpClient HttpClient
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">


<PageTitle>booking_dashboard</PageTitle>
<div class="container">
    @if (allBookings != null && allBookings.Count > 0){
        <table class="table">
            <thead>
                <tr>
                    <th>Status</th>
                    <th>Id</th>
                    <th>Date Start</th>
                    <th>Date End</th>
                    <th>Profile Id</th>
                    <th>Room Id</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in allBookings)
                {
                    <tr class="@GetRowClass(booking)">
                        <td>
                            <i class="bi bi-circle-fill @GetRowClass(booking)"></i>
                        </td>
                        <td>@booking.Id</td>
                        <td>@booking.DateStart.ToString("dd/MM/yyyy")</td>
                        <td>@booking.DateEnd.ToString("dd/MM/yyyy")</td>
                        <td>@booking.ProfileId</td>
                        <td>@booking.RoomId</td>
                        <td>
                            <button class="btn btn-danger delete-profile-btn" @onclick="() => delete_booking_from_id(booking.Id)">
                                <i class="bi bi-trash delete-profile-btn" style="color:white;"></i> Delete  profil
                            </button>

                            <button class="btn-goto-profile" @onclick="@(() => NavigationManager.NavigateTo($"/admin-edit-profile/{booking.ProfileId}"))">
                                Goto profile
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>


    }else if (allBookings == null)
    {
        <center>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128" height="128px" width="128px" class="pl">
                <circle stroke-dashoffset="-376.4" stroke-dasharray="377 377" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="8" stroke="hsl(3,90%,55%)" fill="none" r="60" cy="64" cx="64" class="pl__ring1"></circle>
                <circle stroke-dashoffset="-329.3" stroke-dasharray="329.9 329.9" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="7" stroke="hsl(13,90%,55%)" fill="none" r="52.5" cy="64" cx="64" class="pl__ring2"></circle>
                <circle stroke-dashoffset="-288.6" stroke-dasharray="289 289" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="6" stroke="hsl(23,90%,55%)" fill="none" r="46" cy="64" cx="64" class="pl__ring3"></circle>
                <circle stroke-dashoffset="-254" stroke-dasharray="254.5 254.5" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="5" stroke="hsl(33,90%,55%)" fill="none" r="40.5" cy="64" cx="64" class="pl__ring4"></circle>
                <circle stroke-dashoffset="-225.8" stroke-dasharray="226.2 226.2" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="4" stroke="hsl(43,90%,55%)" fill="none" r="36" cy="64" cx="64" class="pl__ring5"></circle>
                <circle stroke-dashoffset="-203.9" stroke-dasharray="204.2 204.2" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="3" stroke="hsl(53,90%,55%)" fill="none" r="32.5" cy="64" cx="64" class="pl__ring6"></circle>
            </svg>
        </center>
    }
    else{

        <p>No bookings found</p>

    }
</div>

@code {
    public bool ascending = true;

    public string current;
    public List<DomainModels.Booking> allBookings = new List<DomainModels.Booking>();

    public int total_bookings = 0;
    private Profile? profile;


    protected override async Task OnInitializedAsync()
    {
        if (!AppState.LoggedIn || !AppState.IsAdmin)
        {
            NavigationManager.NavigateTo("/");
        }

        allBookings = db.GetBookingsFromSql("SELECT * FROM booking");
        total_bookings = allBookings.Count;
        

    }

    public void delete_booking_from_id(int id){
        db.ExecuteSql($"DELETE FROM booking WHERE id = {id};");

        var bookingToDelete = allBookings.FirstOrDefault(b => b.Id == id);
        if (bookingToDelete != null)
        {
            allBookings.Remove(bookingToDelete);
        }

        // Force UI update
        StateHasChanged();
    }

    private string GetRowClass(DomainModels.Booking booking)
    {
        var now = DateTime.Now.Date;
        if (booking.DateEnd == now)
        {
            return "lastday-booking";
        }
        if (booking.DateEnd < now)
        {
            return "past-booking";
        }
        if (booking.DateStart <= now && booking.DateEnd >= now)
        {
            return "active-booking";
        }
        return "future-booking";
    }
 


    private void SetSortColumn(string colunm)
    {
        if (current == colunm)
        {
            ascending = !ascending;
        }
        else
        {
            current = colunm;
            ascending = true;
        }

        SortRooms(current);
    }

    private void SortRooms(string colunm)
    {
        switch (colunm)
        {
            case "DateStart":
                allBookings = ascending ? allBookings.OrderBy(r => r.DateStart).ToList() : allBookings.OrderByDescending(r => r.DateStart).ToList();
                break;
            case "DateEnd":
                allBookings = ascending ? allBookings.OrderBy(r => r.DateEnd).ToList() : allBookings.OrderByDescending(r => r.DateEnd).ToList();
                break;
        }
    }


}


