@page "/booking_dashboard"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AppState AppState

@using DomainModels
@using System.Linq

<style>
    .active-booking {
        background-color: lightgreen;
    }

    .lastday-booking {
        background-color: lightblue;
    }

    .future-booking {
        background-color: lightyellow;
    }

    .past-booking {
        background-color: lightcoral;
    }
</style>

<PageTitle>booking_dashboard</PageTitle>

@if (allBookings != null && allBookings.Count > 0)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date Start</th>
                <th>Date End</th>
                <th>Profile Id</th>
                <th>Room Id</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <button class="btn btn-link" @onclick="@(() => SetSortColumn("DateStart"))">Sort by date start</button>
            <button class="btn btn-link" @onclick="@(() => SetSortColumn("DateEnd"))">Sort by date end</button>

            @foreach (var booking in allBookings)
            {
                <tr class="@GetRowClass(booking)">
                    <td>@booking.Id</td>
                    <td>@booking.DateStart.ToString("dd/MM/yyyy")</td>
                    <td>@booking.DateEnd.ToString("dd/MM/yyyy")</td>
                    <td>@booking.ProfileId</td>
                    <td>@booking.RoomId</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => DeleteBookingFromId(booking.Id)">
                            Delete booking
                        </button>

                        <button class="btn btn-link"
                                @onclick="@(() => NavigationManager.NavigateTo($"/admin-edit-profile/{booking.ProfileId}"))">
                            Goto profile

                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No bookings found</p>
}

@code {
    public bool ascending = true;
    public string current;
    public List<DomainModels.Booking> allBookings = new List<DomainModels.Booking>();
    public int total_bookings = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!AppState.LoggedIn || !AppState.IsAdmin)
        {
            NavigationManager.NavigateTo("/");
        }

        allBookings = await HttpClient.GetFromJsonAsync<List<DomainModels.Booking>>("https://localhost:7207/api/Booking");
        total_bookings = allBookings.Count;
    }

    public async Task DeleteBookingFromId(int id)
    {
        try
        {
            // Send DELETE request to API
            var response = await HttpClient.DeleteAsync($"https://localhost:7207/api/Booking/DeleteBooking/{id}");

            if (response.IsSuccessStatusCode)
            {
                // If successful, remove booking from allBookings
                var bookingToDelete = allBookings.FirstOrDefault(b => b.Id == id);
                if (bookingToDelete != null)
                {
                    allBookings.Remove(bookingToDelete);
                }
                // Force UI update
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error deleting booking: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }
    }

    private string GetRowClass(DomainModels.Booking booking)
    {
        var now = DateTime.Now.Date;
        if (booking.DateEnd == now)
        {
            return "lastday-booking";
        }
        if (booking.DateEnd < now)
        {
            return "past-booking";
        }
        if (booking.DateStart <= now && booking.DateEnd >= now)
        {
            return "active-booking";
        }
        return "future-booking";
    }

    private void SetSortColumn(string column)
    {
        if (current == column)
        {
            ascending = !ascending;
        }
        else
        {
            current = column;
            ascending = true;
        }

        SortBookings(current);
    }

    private void SortBookings(string column)
    {
        switch (column)
        {
            case "DateStart":
                allBookings = ascending ? allBookings.OrderBy(r => r.DateStart).ToList() : allBookings.OrderByDescending(r => r.DateStart).ToList();
                break;
            case "DateEnd":
                allBookings = ascending ? allBookings.OrderBy(r => r.DateEnd).ToList() : allBookings.OrderByDescending(r => r.DateEnd).ToList();
                break;
        }
    }
}
