@page "/booking_dashboard"
@inject Blazor.Services.DatabaseService db
@inject NavigationManager navManager
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

@using DomainModels
@inject AppState AppState
@inject HttpClient HttpClient
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<style>
    .active-booking {
        background-color: lightgreen;
    }

    .lastday-booking {
        background-color: lightblue;
    }

    .future-booking {
        background-color: lightyellow;
    }
    .past-booking {
        background-color: lightcoral;
    }
</style>


<PageTitle>booking_dashboard</PageTitle>

@if (allBookings != null && allBookings.Count > 0){
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date Start</th>
                <th>Date End</th>
                <th>Profile Id</th>
                <th>Room Id</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <button class="btn btn-link" @onclick="@(() => SetSortColumn("DateStart"))">Sort by date start</button>
            <button class="btn btn-link" @onclick="@(() => SetSortColumn("DateEnd"))">Sort by date end</button>

            @foreach (var booking in allBookings)
            {
                <tr class="@GetRowClass(booking)">
                    <td>@booking.Id</td>
                    <td>@booking.DateStart.ToString("dd/MM/yyyy")</td>
                    <td>@booking.DateEnd.ToString("dd/MM/yyyy")</td>
                    <td>@booking.ProfileId</td>
                    <td>@booking.RoomId</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => delete_booking_from_id(booking.Id)">
                            Delete booking
                        </button>

                        <button class="btn btn-link"
                        @onclick="@(() => navManager.NavigateTo($"/Profile_administrator/{booking.ProfileId}"))"
                        >
                            Goto profile

                        </button>
                    </td>
                </tr>
            
            }

        </tbody>
    </table>


}else{

    <p>No bookings found</p>

}

@code {
    public bool ascending = true;

    public string current;
    public List<Blazor.Services.DatabaseService.Booking> allBookings = new List<Blazor.Services.DatabaseService.Booking>();

    public int total_bookings = 0;
    private Profile? profile;


    protected override async Task OnInitializedAsync()
    {
        allBookings = db.GetBookingsFromSql("SELECT * FROM booking");
        total_bookings = allBookings.Count;
        if (AppState.LoggedIn)
        {
            profile = await HttpClient.GetFromJsonAsync<Profile>($"api/profile/{AppState.UserId}");
        }

        if (profile == null)
        {
            // use profile id to check if admin
            //navManager.NavigateTo($"/Error");
        }

    }

    public void delete_booking_from_id(int id){
        db.ExecuteSql($"DELETE FROM booking WHERE id = {id};");

        var bookingToDelete = allBookings.FirstOrDefault(b => b.Id == id);
        if (bookingToDelete != null)
        {
            allBookings.Remove(bookingToDelete);
        }

        // Force UI update
        StateHasChanged();
    }

    private string GetRowClass(Blazor.Services.DatabaseService.Booking booking)
    {
        var now = DateTime.Now.Date;
        if (booking.DateEnd == now)
        {
            return "lastday-booking";
        }
        if (booking.DateEnd < now)
        {
            return "past-booking";
        }
        if (booking.DateStart <= now && booking.DateEnd >= now)
        {
            return "active-booking";
        }
        

        return "future-booking";
    }
    private void SetSortColumn(string colunm)
    {
        if (current == colunm)
        {
            ascending = !ascending;
        }
        else
        {
            current = colunm;
            ascending = true;
        }

        SortRooms(current);
    }

    private void SortRooms(string colunm)
    {
        switch (colunm)
        {
            case "DateStart":
                allBookings = ascending ? allBookings.OrderBy(r => r.DateStart).ToList() : allBookings.OrderByDescending(r => r.DateStart).ToList();
                break;
            case "DateEnd":
                allBookings = ascending ? allBookings.OrderBy(r => r.DateEnd).ToList() : allBookings.OrderByDescending(r => r.DateEnd).ToList();
                break;
        }
    }

    protected override void OnInitialized()
    {
        if (!AppState.LoggedIn || !AppState.IsAdmin)
        {
            NavigationManager.NavigateTo("/");
        }
    }

}


