@page "/"
@inject Blazor.Services.DatabaseService db
@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

@using DomainModels
@inject AppState AppState
@inject HttpClient HttpClient
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<PageTitle>Welcome to Sunset Resort</PageTitle>

<div class="container">
    <div class="jumbotron text-center mt-4">
        <h1>Sunset Resort</h1>
        <p class="lead">Welcome to the Sunset Resort!</p>
    </div>
    <div class="row">
        <div class="col-md-12">
            <p style="text-align:center;">Experience luxury and comfort at our beachfront hotel. Relax by the pool, enjoy fine dining, and explore the beautiful surroundings.</p>
        </div>
    </div>
    <br>
    <div class="row d-flex justify-content-center">
        <div class="jumbotron col-md-3 text-center">
            <h3>Luxurious Rooms</h3>
            <p>Our rooms are designed to provide you with ultimate comfort and relaxation.</p>
        </div>
        <div class="jumbotron col-md-3 text-center">
            <h3>Fine Dining</h3>
            <p>Enjoy gourmet cuisine prepared by our world-class chefs.</p>
        </div>
        <div class="jumbotron col-md-3 text-center">
            <h3>Scenic Views</h3>
            <p>Experience breathtaking views of the ocean and the surrounding nature.</p>
        </div>
    </div>

    <div class="container">
        <h1 class="text-center mt-4">Available Rooms</h1>
        <p class="text-center">Currently @booked_count rooms are booked out of @total_rooms</p>

        @if (allRooms != null && allRooms.Count > 0)
        {
            <table class="table table-striped table-bordered mt-4">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            <button class="btn btn-link" @onclick="@(() => SetSortColumn("Id"))">Room ID</button>
                        </th>
                        <th>
                            <button class="btn btn-link" @onclick="@(() => SetSortColumn("Price"))">Price</button>
                        </th>
                        <th>
                            <button class="btn btn-link" @onclick="@(() => SetSortColumn("Type"))">Type</button>
                        </th>
                        <th>
                            <button class="btn btn-link" @onclick="@(() => SetSortColumn("CurrentlyBooked"))">Currently Booked</button>
                        </th>
                        <th>
                            <p>Photos</p>
                        </th>
                        <th>
                            <p>Book</p>
                        </th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var room in allRooms)
                    {

                        <tr style="background-color:@(room.CurrentlyBooked ? "lightcoral" : "lightgreen")">


                            <td>@room.Id</td>
                            <td>@room.Price DKK</td>
                            <td>
                                @if (room.Type == 1)
                                {
                                    <span>Standard</span>
                                }
                                else if (room.Type == 2)
                                {
                                    <span>Deluxe</span>
                                }
                                else if (room.Type == 3)
                                {
                                    <span>Suite</span>
                                }
                            </td>
                            <td>@(room.CurrentlyBooked ? "Yes" : "No")</td>
                            <td>@room.Photos</td>
                            <td>
                                <button class="btn btn-link" @onclick="@(() => gotoBooking(room.Id))">
                                    Goto booking
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No rooms available at this time.</p>
        }
    </div>
</div>

@code {
    public string current;
    public bool ascending = true;

    public List<Blazor.Services.DatabaseService.Room> allRooms = new List<Blazor.Services.DatabaseService.Room>();
    public List<Blazor.Services.DatabaseService.Booking> allBookings = new List<Blazor.Services.DatabaseService.Booking>();

    public int booked_count = 0;
    public int total_rooms = 0;

    protected override async Task OnInitializedAsync()
    {
        allRooms = db.GetRoomsFromSql("SELECT * FROM room");
        var today = DateTime.Today.ToString("yyyy-MM-dd");
        var query = $"SELECT * FROM booking WHERE date_start <= '{today}' AND date_end >= '{today}'";
        allBookings = db.GetBookingsFromSql(query);
        total_rooms = allRooms.Count;


        for (int i = 0; i < allRooms.Count; i++)
        {
            if (allRooms[i].CurrentlyBooked == true) continue; /*already checked so just skip*/
            for (int j = 0; j <allBookings.Count; j++)
            {
                if (allRooms[i].Id == allBookings[j].RoomId)
                {
                        allRooms[i].CurrentlyBooked = true;
                        booked_count++;
                        allBookings.RemoveAt(j);
                        break;
                    
                } 
            }
        }
        allRooms = allRooms.OrderBy(r => r.CurrentlyBooked).ToList();

    }
    public void gotoBooking(int id)
    {
        if (!AppState.LoggedIn)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            NavigationManager.NavigateTo($"/room-details/{id}");
        }
    }
    private void SetSortColumn(string colunm)
    {
        if (current == colunm)
        {
            ascending = !ascending;
        }
        else
        {
            current = colunm;
            ascending = true;
        }

        SortRooms(current);
    }

    private void SortRooms(string colunm)
    {
        switch (colunm)
        {
            case "Id":
                allRooms = ascending ? allRooms.OrderBy(r => r.Id).ToList() : allRooms.OrderByDescending(r => r.Id).ToList();
                break;
            case "Price":
                allRooms = ascending ? allRooms.OrderBy(r => r.Price).ToList() : allRooms.OrderByDescending(r => r.Price).ToList();
                break;
            case "Type":
                allRooms = ascending ? allRooms.OrderBy(r => r.Type).ToList() : allRooms.OrderByDescending(r => r.Type).ToList();
                break;
            case "CurrentlyBooked":
                allRooms = ascending ? allRooms.OrderBy(r => r.CurrentlyBooked).ToList() : allRooms.OrderByDescending(r => r.CurrentlyBooked).ToList();
                break;
        }
    }
}
