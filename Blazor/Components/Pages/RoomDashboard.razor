@page "/Room_Dashboard"
@using DomainModels

<!-- Bootstrap Icons CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<PageTitle>Room_Dashboard</PageTitle>

<div class="container">
	@if (allRooms != null)
	{
		<!-- Room Table -->
		<table class="table">
			<thead>
				<tr>
					<th>Id</th>
					<th>Type</th>
					<th>Price</th>
					<th>Photo</th>
					<th>Description</th>
					<th>Action</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var room in allRooms)
				{
					<tr>
						<td>@room.Id</td>
						<td>@room.Name</td>
						<td>@room.Price</td>
						<td>@room.Photos</td>
						<td class="td-desciption">@room.Description</td>
						<td>
							<button class="btn btn-danger delete-room-btn" @onclick="() => DeleteRoomById(room.Id)">
								<i class="bi bi-trash delete-profile-btn" style="color:white;"></i> Delete room
							</button>
							<button class="btn-goto-room" @onclick="@(() => navManager.NavigateTo($"/room_details/{room.Id}"))">
								<i class="bi bi-house-gear"></i> Room
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else if (allRooms == null)
	{
		<!-- Loading Spinner -->
		<center>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128" height="128px" width="128px" class="pl">
				<circle stroke-dashoffset="-376.4" stroke-dasharray="377 377" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="8" stroke="hsl(3,90%,55%)" fill="none" r="60" cy="64" cx="64" class="pl__ring1"></circle>
				<circle stroke-dashoffset="-329.3" stroke-dasharray="329.9 329.9" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="7" stroke="hsl(13,90%,55%)" fill="none" r="52.5" cy="64" cx="64" class="pl__ring2"></circle>
				<circle stroke-dashoffset="-288.6" stroke-dasharray="289 289" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="6" stroke="hsl(23,90%,55%)" fill="none" r="46" cy="64" cx="64" class="pl__ring3"></circle>
				<circle stroke-dashoffset="-254" stroke-dasharray="254.5 254.5" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="5" stroke="hsl(33,90%,55%)" fill="none" r="40.5" cy="64" cx="64" class="pl__ring4"></circle>
				<circle stroke-dashoffset="-225.8" stroke-dasharray="226.2 226.2" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="4" stroke="hsl(43,90%,55%)" fill="none" r="36" cy="64" cx="64" class="pl__ring5"></circle>
				<circle stroke-dashoffset="-203.9" stroke-dasharray="204.2 204.2" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="3" stroke="hsl(53,90%,55%)" fill="none" r="32.5" cy="64" cx="64" class="pl__ring6"></circle>
			</svg>
		</center>
	}
	else
	{
		<p>No bookings found</p>
	}
</div>

@code {
	private List<Room> allRooms = new List<Room>();

	protected override async Task OnInitializedAsync()
	{
		if (!AppState.LoggedIn || !AppState.IsAdmin)
		{
			navManager.NavigateTo("/");
		}

		allRooms = await dbService.GetRooms();
	}

	private async Task DeleteRoomById(int id)
	{
		if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure, you want to delete your profile?"))
		{
			await dbService.DeleteRoom(id);

			var roomToDelete = allRooms.FirstOrDefault(r => r.Id == id);
			if (roomToDelete != null)
			{
				allRooms.Remove(roomToDelete);
			}

			StateHasChanged();
		}
		else
		{
			Console.WriteLine($"Error with deleting roomId {id}.");
		}
	}
}
