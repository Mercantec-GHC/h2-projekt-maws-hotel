@page "/profile_administrator/{userId:int}"
@inject Blazor.Services.DatabaseService db
@inject NavigationManager navManager

@using DomainModels
@inject AppState AppState
@inject HttpClient HttpClient
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Profile Administrator Dashboard</PageTitle>

@if (user_profile != null)
{
    <div class="profile-container">
        <div>
            <label><strong>Id:</strong></label>
            <input type="text" value="@user_profile.Id" disabled />
        </div>
        <div>
            <label><strong>Name:</strong></label>
            <input type="text" @bind="user_profile.Name" />
        </div>
        <div>
            <label><strong>Email:</strong></label>
            <input type="email" @bind="user_profile.Email" />
        </div>
        <div>
            <label><strong>Birthday:</strong></label>
            <input type="date" @bind="user_profile.Birthday" />
        </div>
        <div>
            <label><strong>Address:</strong></label>
            <input type="text" @bind="user_profile.Address" />
        </div>
        <div>
            <label><strong>Phone Number:</strong></label>
            <input type="text" @bind="user_profile.PhoneNumber" />
        </div>
        <div>
            <label><strong>Administrator:</strong></label>
            <input type="checkbox" @bind="user_profile.Administrator" />
        </div>
        <button @onclick="SaveChanges">Save Changes</button>
    </div>
}
else
{
    <p>No profile with id @userId found</p>
}

@code {
    [Parameter] public int? userId { get; set; }
    public Blazor.Services.DatabaseService.Profile user_profile { get; set; }
    private Profile? profile;

    protected override async Task OnInitializedAsync()
    {

        if (!AppState.LoggedIn || !AppState.IsAdmin)
        {
            navManager.NavigateTo("/");
            return;
        }

        // Only fetch the profile if the user is logged in and is an admin
        user_profile = db.GetProfilesFromSql($"SELECT * FROM profile WHERE id = {userId}").FirstOrDefault();

        if (user_profile == null)
        {
            navManager.NavigateTo("/profile_not_found");
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            bool updateSuccess = db.UpdateProfile(user_profile);

            if (updateSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Profile updated successfully.");
                // Refresh the page to show updated data
                navManager.NavigateTo($"/profile_administrator/{userId}", true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to update profile. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating profile: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while updating the profile.");
        }
    }
}
