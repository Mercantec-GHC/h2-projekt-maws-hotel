@page "/EditProfile/{id:int}"
@using DomainModels

<PageTitle>Edit Profile</PageTitle>

<HeadContent>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
</HeadContent>

<div class="container">
    @if (profile != null)
    {
        <div class="admin-edit-profile">
            <!-- Profile Header -->
            <button @onclick="DeleteProfile" class="delete-profile-button"><i class="bi bi-trash"></i></button>
            <div class="profile-header">
                <div class="profile-icon">
                    <i class="bi bi-person-circle"></i>
                </div>
                <h3>Edit Profile</h3>
            </div>
            <!-- Edit Form -->
            <div class="card-block">
                <EditForm Model="@profile" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <!-- Name Input -->
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <InputText id="name" @bind-Value="profile.Name" class="form-control" />
                    </div>
                    <!-- Email Input -->
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <InputText id="email" @bind-Value="profile.Email" class="form-control" />
                    </div>
                    <!-- Birthday Input -->
                    <div class="form-group">
                        <label for="birthday">Birthday:</label>
                        <InputDate id="birthday" @bind-Value="profile.Birthday" class="form-control" />
                    </div>
                    <!-- Address Input -->
                    <div class="form-group">
                        <label for="address">Address:</label>
                        <InputText id="address" @bind-Value="profile.Address" class="form-control" />
                    </div>
                    <!-- Phone Number Input -->
                    <div class="form-group">
                        <label for="phone">Phone Number:</label>
                        <InputText id="phone" @bind-Value="profile.PhoneNumber" class="form-control" />
                    </div>
                    <!-- Admin Checkbox (only for admins) -->
                    @if (AppState.IsAdmin)
                    {
                        <div class="form-group custom-checkbox">
                            <input type="checkbox" id="adminCheckbox" @bind="profile.Administrator" class="custom-check-input" />
                            <label for="adminCheckbox" class="custom-check-label">
                                <span class="checkmark"></span>
                                Administrator
                            </label>
                        </div>
                    }
                    <!-- Form Buttons -->
                    <div class="text-center mt-4">
                        <button type="submit" class="button-save" @onclick="HandleValidSubmit">Save Changes</button>
                        <button type="button" @onclick="Cancel" class="button-cancel">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        <p class="loading">Loading...</p>
    }
</div>

@code {
    [Parameter]
    public int id { get; set; }
    private Profile? profile;

    // When page is loaded
    protected override async Task OnInitializedAsync()
    {
        profile = await Http.GetFromJsonAsync<Profile>($"api/profile/{id}");
        if (profile == null)
        {
            navManager.NavigateTo("/");
        }
    }

    // Handle submit to edit profile
    private async Task HandleValidSubmit()
    {
        if (profile.Birthday.HasValue)
        {
            profile.Birthday = DateTime.SpecifyKind(profile.Birthday.Value, DateTimeKind.Utc);
        }
        var response = await dbService.EditProfile(profile.Id, profile);
        if (response.IsSuccessStatusCode)
        {
            if(AppState.IsAdmin && profile.Administrator == false && profile.Id == AppState.UserId){
                AppState.Logout();
                navManager.NavigateTo("/login");
            }
            else{
                navManager.NavigateTo("/ProfileDashboard");
            }
        }
        else
        {
            Console.WriteLine("Error updating profile");
        }
    }

    // Deletes profile 
    private async Task DeleteProfile()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette din profil?"))
        {
            var response = await Http.DeleteAsync($"api/profile/deactivate/{AppState.UserId}");
            if (response.IsSuccessStatusCode)
            {
                AppState.Logout();
                navManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Fejl ved sletning af profil");
            }
        }
    }

    // Return to profile dashboard
    private void Cancel()
    {
        navManager.NavigateTo("/ProfileDashboard");
    }
}