@page "/EditProfile/{id:int}"
@using DomainModels



<h3>Edit Profile</h3>

@if (profile != null)
{
    <EditForm Model="@profile" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="profile.Name" class="form-control" />
        </div>

        <div>
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="profile.Email" class="form-control" />
        </div>

        <div>
            <label for="birthday">Birthday:</label>
            <InputDate id="birthday" @bind-Value="profile.Birthday" class="form-control" />
        </div>

        <div>
            <label for="address">Address:</label>
            <InputText id="address" @bind-Value="profile.Address" class="form-control" />
        </div>

        <div>
            <label for="phone">Phone Number:</label>
            <InputText id="phone" @bind-Value="profile.PhoneNumber" class="form-control" />
        </div>
        @if (AppState.IsAdmin)
        {
            <div>
                <label for="administrator">Administrator:</label>
                <InputCheckbox id="administrator" @bind-Value="profile.Administrator" />
            </div>   
        }

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
        <button class="btn btn-danger delete-profile-btn" @onclick="DeleteProfile">
            <i class="bi bi-trash"></i> Delete  profil
        </button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Profile? profile;

    protected override async Task OnInitializedAsync()
    {
        profile = await Http.GetFromJsonAsync<Profile>($"api/profile/{id}");
        if (profile == null || AppState.UserId != id)
        {
            navManager.NavigateTo("/");

        }
    }

    private async Task HandleValidSubmit()
    {
        if (profile.Birthday.HasValue)
        {
            profile.Birthday = profile.Birthday.Value.ToUniversalTime();
        }

        var response = await Http.PutAsJsonAsync($"api/profile/{id}", profile);

        if (response.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/ProfileDashboard");
        }
        else
        {
            // Handle error
            Console.WriteLine("Error updating profile");
        }
    }

    private async Task DeleteProfile()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette din profil?"))
        {
            var response = await Http.DeleteAsync($"api/profile/deactivate/{AppState.UserId}");

            if (response.IsSuccessStatusCode)
            {
                AppState.Logout();
                navManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Fejl ved sletning af profil");
            }
        }
    }

    private void Cancel()
    {
        navManager.NavigateTo("/ProfileDashboard");
    }
}
