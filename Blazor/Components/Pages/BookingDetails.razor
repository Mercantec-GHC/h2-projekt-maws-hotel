@page "/booking-details/{bookingId:int}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using DomainModels
@inject AppState AppState
@using Microsoft.JSInterop

<script src="_content/MudBlazor/MudBlazor.min.js"></script>


<PageTitle>Booking Details</PageTitle>

<HeadContent>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
</HeadContent>

<div class="container">
    <div class="page-content">
        <div class="padding">
            <div class="row justify-content-center">
                <div class="col-md-8 col-lg-10">
                    <div class="card booking-card-full shadow-lg rounded">
                        <div class="row m-l-0 m-r-0">
                            <div class="col-sm-4 bg-c-lite-green booking-header">
                                <div class="card-block text-center text-white">
                                    <h2>Booking Details</h2>
                                    <div class="m-b-25">
                                        <i class="bi bi-calendar-check booking-icon"></i>
                                    </div>
                                    <h6 class="booking-id">Booking ID: @bookingId</h6>
                                </div>
                            </div>
                            <div class="col-sm-8">
                                <div class="card-block">
                                    <h6 class="m-b-20 p-b-5 b-b-default f-w-600 title">Customer Information</h6>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <p class="m-b-10 f-w-600">Name</p>
                                            <h6 class="text-muted f-w-400">@profile.Name</h6>
                                        </div>
                                        <div class="col-sm-6">
                                            <p class="m-b-10 f-w-600">Email</p>
                                            <h6 class="text-muted f-w-400">@profile.Email</h6>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <p class="m-b-10 f-w-600">Phone</p>
                                            <h6 class="text-muted f-w-400">@profile.PhoneNumber</h6>
                                        </div>
                                    </div>
                                    <h6 class="m-b-20 m-t-40 p-b-5 b-b-default f-w-600 title">Booking Dates</h6>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <!--<p class="m-b-10 f-w-600">Start Date</p>
                                            <input type="date" id="dateStart" class="date-input" disabled="@isDisabled" @bind="booking.DateStart" />   -->
                                            <MudContainer>
                                                <MudDatePicker style="color:black" Label="Start Date" DisplayMonths="1" 
                                                                           TitleDateFormat="dddd, dd MMMM" 
                                                                           @bind-Date="@date_start" 
                                                                           DateFormat="dd.MM.yyyy" 
                                                                           AdditionalDateClassesFunc="CheckDate" 
                                                                           Color="Color.Primary" HelperText="@booking.DateStart.ToString("dd.MM.yyyy")"/>
                                            </MudContainer>                                        
                                        </div>
                                        <div class="col-sm-6">
                                            <!-- <p class="m-b-10 f-w-600">End Date</p>
                                            <input type="date" id="dateEnd" class="date-input" disabled="@isDisabled" @bind="booking.DateEnd" />  -->
                                            <MudContainer>
                                                <MudDatePicker style="color:black" Label="Start Date" DisplayMonths="1" 
                                                                        TitleDateFormat="dddd, dd MMMM" 
                                                                        @bind-Date="@date_end" 
                                                                        DateFormat="dd.MM.yyyy" 
                                                                        AdditionalDateClassesFunc="CheckDate" 
                                                                        Color="Color.Primary" HelperText="@booking.DateEnd.ToString("dd.MM.yyyy")"/>
                                        </MudContainer>                                        
                                        </div>
                                    </div>
                                    <div class="container-buttons">
                                        <button class="button-edit" @onclick="ToggleEdit">@(isDisabled ? "Edit" : "Save")</button>
                                        @if (!isDisabled)
                                        {
                                            <button class="button-delete" @onclick="showModal"><i class="bi bi-trash"></i> Delete Booking</button>
                                        }
                                        else
                                        {
                                            <button class="button-cancel" @onclick="Cancel">Cancel</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if(showDeleteConfirmation)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="user-box">
        <p>Confirm Delete Booking?</p>
        </div>
            <form >
                <center>
                <a @onclick="() => DeleteBooking(bookingId)" >
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Confirm
                </a>
                <br>
                <a @onclick="hideModal" >
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Cancel
                </a>
            </center>
        </form>
    </div>
}



@code {
    [Parameter]
    public int bookingId { get; set; }
    private Profile profile = new Profile();
    private Booking booking = new Booking();
    private bool isDisabled = true;
    private bool showDeleteConfirmation = false;
    private DateTime? date_start;
    private DateTime? date_end; 
    private List<Booking> exBookingsOnRoomId = new List<Booking>();
    private List<DateTime> specialDates = new List<DateTime>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch booking details
        booking = await dbService.GetBookingById(bookingId);

        // Fetch profile details
        profile = await dbService.GetProfileByUserID(booking.ProfileId);

        exBookingsOnRoomId = await dbService.GetBookingsFromRoomId(booking.RoomId);

    }

    private string CheckDate(DateTime date)
    {
        specialDates.Clear();
        foreach (var booking in exBookingsOnRoomId)
        {
            specialDates.AddRange(Enumerable.Range(0, (booking.DateEnd - booking.DateStart).Days + 1).Select(DateTimeOffset => booking.DateStart.AddDays(DateTimeOffset)));
        }
        // compare only the date portion to find a match
        return this.specialDates.Contains(date.Date) ? "special-day" : string.Empty;
    }

    private async Task ToggleEdit()
    {
        if (!isDisabled)
        {
            booking.DateStart = date_start ?? booking.DateStart;
            booking.DateEnd = date_end ?? booking.DateEnd;
            // Validate dates
            if (booking.DateStart == default || booking.DateEnd == default)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Vælg venligst gyldige datoer for start og slut.");
                return;
            }

            if (booking.DateStart >= booking.DateEnd)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Startdatoen skal være før slutdatoen.");
                return;
            }

            if (booking.DateStart < DateTime.Now.Date)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Du kan ikke booke et værelse i fortiden.");
                return;
            }

            // Check for existing bookings
            var existingBookings = await dbService.CheckExistingBookings(booking.RoomId, booking.DateStart, booking.DateEnd);

            if (existingBookings.Any(b => b.Id != bookingId))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Værelset er allerede booket i denne periode.");
                return;
            }

            // Save changes
            var response = await dbService.EditBooking(bookingId, booking);
            if (response.IsSuccessStatusCode)
            {
                navManager.NavigateTo("/booking-details/" + bookingId);
            }
        }

        isDisabled = !isDisabled;
    }

    private void showModal() {
        showDeleteConfirmation = true;
    }
    private void hideModal() {
        showDeleteConfirmation = false;
    }

    private void Cancel()
    {
        navManager.NavigateTo("/ProfileDashboard");
    }

    private async Task DeleteBooking(int bookingId)
    {
        try {
            await dbService.DeleteBooking(bookingId);
            navManager.NavigateTo("/ProfileDashboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error deleting booking");
        }
        
    }
}


<style>
    /* Custom styles for the calendar */
    :root {
        --mud-palette-primary: rgba(255, 161, 30, 1);
    }
    .mud-theme-primary {
        color: var(--mud-palette-primary-text) !important;
        background-color: rgba(255, 161, 30, 1) !important;
    }

    .special-day {
        color: red !important;
        pointer-events: none;
        opacity: 0.8;
    }

    .mud-picker-inline-paper {
        margin: auto;
        position: fixed;
        transform: scale(0.80);
        bottom: 225px;
        right: 30%;
        transition: 1s ease-in;
    }

    .mud-shrink ~ label.mud-input-label.mud-input-label-inputcontrol {
        color: rgba(255, 161, 30, 1);
    }

    .mud-icon-root.mud-svg-icon {
        fill: rgba(255, 161, 30, 1);
    }

    .mud-picker-calendar-header-switch {
        display: flex;
        margin-top: 4px;
        align-items: center;
        margin-bottom: 8px;
        justify-content: space-between;
        color: black;
    }

    .mud-picker-calendar-content {
        display: grid;
        --selected-day: 0;
        grid-column-gap: 10px;
        grid-template-columns: auto;
        color: black;
    }

    /* End of custom styles for the calendar */
</style>