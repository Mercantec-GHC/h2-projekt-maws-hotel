@page "/manage_bookings"
@using Microsoft.JSInterop
@using DomainModels

<!-- Bootstrap Icons CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<PageTitle>manage_bookings</PageTitle>

<div class="container">
    @if (allBookings != null && allBookings.Count > 0)
    {
        <!-- Bookings Table -->
        <table class="table">
            <thead>
                <tr>
                    <th>Status</th>
                    <th>Id</th>
                    <th>Date Start</th>
                    <th>Date End</th>
                    <th>Profile Id</th>
                    <th>Room Id</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in allBookings)
                {
                    <tr class="@GetRowClass(booking)">
                        <td>
                            <i class="bi bi-circle-fill @GetRowClass(booking)"></i>
                        </td>
                        <td>@booking.Id</td>
                        <td>@booking.DateStart.ToString("dd/MM/yyyy")</td>
                        <td>@booking.DateEnd.ToString("dd/MM/yyyy")</td>
                        <td>@booking.ProfileId</td>
                        <td>@booking.RoomId</td>
                        <td>
                            <!-- Delete Booking Button -->
                            <button class="btn btn-danger delete-profile-btn" @onclick="() => ShowDeleteConfirmation(booking.Id)">
                                <i class="bi bi-trash delete-profile-btn" style="color:white;"></i> Delete booking
                            </button>

                            <!-- Go to Profile Button -->
                            <button class="btn-goto-profile" @onclick="@(() => navManager.NavigateTo($"/show_booking/{booking.Id}"))">
                                <i class="bi bi-calendar-check"></i> Booking
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (allBookings == null)
    {
        <!-- Loading Spinner -->
        <center>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128" height="128px" width="128px" class="pl">
                <circle stroke-dashoffset="-376.4" stroke-dasharray="377 377" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="8" stroke="hsl(3,90%,55%)" fill="none" r="60" cy="64" cx="64" class="pl__ring1"></circle>
                <circle stroke-dashoffset="-329.3" stroke-dasharray="329.9 329.9" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="7" stroke="hsl(13,90%,55%)" fill="none" r="52.5" cy="64" cx="64" class="pl__ring2"></circle>
                <circle stroke-dashoffset="-288.6" stroke-dasharray="289 289" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="6" stroke="hsl(23,90%,55%)" fill="none" r="46" cy="64" cx="64" class="pl__ring3"></circle>
                <circle stroke-dashoffset="-254" stroke-dasharray="254.5 254.5" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="5" stroke="hsl(33,90%,55%)" fill="none" r="40.5" cy="64" cx="64" class="pl__ring4"></circle>
                <circle stroke-dashoffset="-225.8" stroke-dasharray="226.2 226.2" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="4" stroke="hsl(43,90%,55%)" fill="none" r="36" cy="64" cx="64" class="pl__ring5"></circle>
                <circle stroke-dashoffset="-203.9" stroke-dasharray="204.2 204.2" stroke-linecap="round" transform="rotate(-90,64,64)" stroke-width="3" stroke="hsl(53,90%,55%)" fill="none" r="32.5" cy="64" cx="64" class="pl__ring6"></circle>
            </svg>
        </center>
    }
    else
    {
        <p>No bookings found</p>
    }
</div>


@if (showDeleteConfirmation)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content login-box">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="close" @onclick="CancelDelete">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this booking?</p>
                </div>
                <div class="modal-footer">
                    <a @onclick="ConfirmDelete">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        Delete Booking
                    </a>
                    <a @onclick="CancelDelete">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        Cancel
                    </a>
                    
                </div>
            </div>
        </div>
    </div>
}


@code {
    // Properties
    public bool ascending = true;
    public string current;
    public List<DomainModels.Booking> allBookings = new List<DomainModels.Booking>();
    public int total_bookings = 0;
    private Profile? profile;
    private bool showDeleteConfirmation = false;
    private int bookingIdToDelete;

    // Initialization
    protected override async Task OnInitializedAsync()
    {
        if (!AppState.LoggedIn || !AppState.IsAdmin)
        {
            navManager.NavigateTo("/");
        }

        allBookings = await APIService.GetBookings();
        total_bookings = allBookings.Count;
    }

    // Delete booking
    public async Task delete_booking_from_id(int id)
    {
        await APIService.DeleteBooking(id);

        var bookingToDelete = allBookings.FirstOrDefault(b => b.Id == id);
        if (bookingToDelete != null)
        {
            allBookings.Remove(bookingToDelete);
        }

        // Force UI update
        StateHasChanged();
    }

    // Get row class based on booking status
    private string GetRowClass(DomainModels.Booking booking)
    {
        var now = DateTime.Now.Date;
        if (booking.DateEnd == now)
        {
            return "lastday-booking";
        }
        if (booking.DateEnd < now)
        {
            return "past-booking";
        }
        if (booking.DateStart <= now && booking.DateEnd >= now)
        {
            return "active-booking";
        }
        return "future-booking";
    }

    // Set sort column
    private void SetSortColumn(string colunm)
    {
        if (current == colunm)
        {
            ascending = !ascending;
        }
        else
        {
            current = colunm;
            ascending = true;
        }

        SortRooms(current);
    }

    // Sort rooms
    private void SortRooms(string colunm)
    {
        switch (colunm)
        {
            case "DateStart":
                allBookings = ascending ? allBookings.OrderBy(r => r.DateStart).ToList() : allBookings.OrderByDescending(r => r.DateStart).ToList();
                break;
            case "DateEnd":
                allBookings = ascending ? allBookings.OrderBy(r => r.DateEnd).ToList() : allBookings.OrderByDescending(r => r.DateEnd).ToList();
                break;
        }
    }


    // Delete modal
    // Show delete confirmation modal
    private void ShowDeleteConfirmation(int id)
    {
        bookingIdToDelete = id;
        showDeleteConfirmation = true;
    }

    // Cancel delete
    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }

    // Confirm delete
    private async Task ConfirmDelete()
    {
        await delete_booking_from_id(bookingIdToDelete);
        showDeleteConfirmation = false;
    }

}
