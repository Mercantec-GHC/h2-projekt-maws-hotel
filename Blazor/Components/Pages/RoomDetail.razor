@page "/room-details/{RoomId:int}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using DomainModels
@inject AppState AppState

<h3>Værelsesdetaljer</h3>

@if (room != null)
{
    <img src="@room.Photos" alt="Room photo" class="room-photo" />
    <p><strong>Pris:</strong> @room.Price DKK</p>
    <p>
        <strong>Beskrivelse:</strong>
        @if (room.Type == 1)
        {
            <span>Nyd et afslappende ophold i vores standardværelse. Værelset byder på en behagelig seng, et skrivebord, et fladskærms-tv og gratis Wi-Fi. Det private badeværelse er udstyret med et brusebad, håndklæder og toiletartikler.</span>
        }
        else if (room.Type == 2)
        {
            <span>Forkæl dig selv med et ophold i vores eksklusive deluxe-værelse. Værelset byder på en king-size seng, et stort badeværelse med spa-faciliteter, en minibar og en privat balkon med udsigt.</span>
        }
        else if (room.Type == 3)
        {
            <span>Forkæl dig selv med et ophold i vores eksklusive suite. Værelset byder på et separat soveværelse, en rummelig stue, et fuldt udstyret køkken eller køkkenniche, og et luksuriøst badeværelse med spa-faciliteter.</span>
        }
    </p>

    <div>
        <label for="date_start">Startdato: </label>
        <input type="date" @bind="date_start" />
    </div>
    <div>
        <label for="date_end">Slutdato: </label>
        <input type="date" @bind="date_end" />
    </div>

    <button @onclick="BookRoom">Book nu</button>
}
else
{
    <p>Indlæser værelsesoplysninger...</p>
}

@code {
    [Parameter]
    public int RoomId { get; set; }

    private List<Room> rooms = new List<Room>();
    private Room room;
    private DateTime date_start = DateTime.Now.Date;
    private DateTime date_end = DateTime.Now.Date.AddDays(1);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            rooms = await dbService.GetRooms();
            room = rooms.FirstOrDefault(r => r.Id == RoomId);

            if (rooms == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Værelset blev ikke fundet. Prøv igen.");
                navManager.NavigateTo("/error");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Noget gik galt: {ex.Message}");
            navManager.NavigateTo("/error");
        }
    }

    private async Task BookRoom()
    {
        if (date_start == default || date_end == default)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vælg venligst gyldige datoer for start og slut.");
            return;
        }

        if (date_start >= date_end)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Startdatoen skal være før slutdatoen.");
            return;
        }

        if (date_start < DateTime.Now.Date)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Du kan ikke booke et værelse i fortiden.");
            return;
        }

        try
        {
            var bookingRequest = new Booking
            {
                DateStart = date_start,
                DateEnd = date_end,
                ProfileId = AppState.UserId,
                RoomId = RoomId
            };

            await dbService.PostBooking(bookingRequest);
            await JSRuntime.InvokeVoidAsync("alert", "Værelset er blevet booket succesfuldt!");
            navManager.NavigateTo("/ProfileDashboard");
           
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Noget gik galt: {ex.Message}");
        }
    }
}
