@page "/ProfileDashboard"
@using DomainModels
@using Blazor.Services
@inject AppState AppState
@inject HttpClient HttpClient
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



<h3>Profile Dashboard</h3>

@if (profile != null)
{
    <p>Id: @profile.Id</p>
    <p>Name: @profile.Name</p>
    <p>Email: @profile.Email</p>
    <p>Birthday: @profile.Birthday?.ToShortDateString()</p>
    <p>Address: @profile.Address</p>
    <p>Phone Number: @profile.PhoneNumber</p>

    <button class="btn btn-danger" @onclick="DeleteProfile">Slet profil</button>

    <button class="btn btn-danger" @onclick="EditProfile">Ændre profil</button>


    @if (AppState.LoggedIn)
    {
        <button class="btn btn-primary" @onclick="NavigateToBooking">Book et værelse</button>

    }

    @if (AppState.IsAdmin)
    {
        <th>Admin Actions</th>
    }

    // ... in the table row for each profile ...

    @if (AppState.IsAdmin)
    {
        <td>
            <a href="@($"/admin-edit-profile/{profile.Id}")" class="btn btn-primary">Edit</a>
        </td>
    }


}

else
{
    <p>Loading...</p>
}
<h4>Upcoming Bookings</h4>

@if (upcomingBookings != null && upcomingBookings.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Booking ID</th>
                <th>Room</th>
                <th>Start Date</th>
                <th>End Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in upcomingBookings)
            {
                <tr>
                    <td>@booking.Id</td>
                    <td>@booking.RoomId</td>
                    <td>@booking.DateStart.ToString("dd/MM/yyyy")</td>
                    <td>@booking.DateEnd.ToString("dd/MM/yyyy")</td>
                    
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No upcoming bookings found.</p>
}




@code {
    private Profile? profile;
    public List<DomainModels.Booking> upcomingBookings = new List<DomainModels.Booking>();

    protected override async Task OnInitializedAsync()
    {
        if (AppState.LoggedIn)
        {
            profile = await HttpClient.GetFromJsonAsync<Profile>($"api/profile/{AppState.UserId}");
            var today = DateTime.Today.ToString("yyyy-MM-dd");
            upcomingBookings = await HttpClient.GetFromJsonAsync<List<DomainModels.Booking>>($"api/bookings/profile/{AppState.UserId}");

        }
    }

    private async Task DeleteProfile()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette din profil?"))
        {
            var response = await Http.DeleteAsync($"api/profile/deactivate/{AppState.UserId}");

            if (response.IsSuccessStatusCode)
            {
                AppState.Logout();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Fejl ved sletning af profil");
            }
        }
    }

    private void EditProfile()
    {
        NavigationManager.NavigateTo($"/EditProfile/{profile?.Id}");
    }

    private void NavigateToBooking()
    {
        NavigationManager.NavigateTo("/");
    }

}