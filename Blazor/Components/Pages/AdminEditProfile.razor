@page "/admin-edit-profile/{id:int}"
@using DomainModels
@inject ILogger<AdminEditProfile> Logger

<PageTitle>Edit Profile</PageTitle>

<HeadContent>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
</HeadContent>

<div class="container">
    @if (!AppState.LoggedIn || !AppState.IsAdmin)
    {
        <p>You do not have permission to access this page.</p>
    }
    else if (profile != null)
    {
        <div class="admin-edit-profile">
            <div class="profile-header">
                <div class="profile-icon">
                    <i class="bi bi-person-circle"></i>
                </div>
                <h3>Edit Profile</h3>
            </div>
            <div class="card-block">
                <EditForm Model="@profile" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="name">Name:</label>
                        <InputText id="name" @bind-Value="profile.Name" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="email">Email:</label>
                        <InputText id="email" @bind-Value="profile.Email" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="birthday">Birthday:</label>
                        <InputDate id="birthday" @bind-Value="profile.Birthday" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="address">Address:</label>
                        <InputText id="address" @bind-Value="profile.Address" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="phone">Phone Number:</label>
                        <InputText id="phone" @bind-Value="profile.PhoneNumber" class="form-control" />
                    </div>

                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <InputCheckbox @bind-Value="profile.Administrator" class="form-check-input" />
                            <span class="checkmark"></span>
                            Administrator
                        </label>
                    </div>

                    <div class="text-center mt-4">
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                        <button type="button" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        <p class="loading">Loading...</p>
    }
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private Profile? profile;
    private HttpClient httpClient;

    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient("API");
    }


    protected override async Task OnInitializedAsync()
    {
        if (!AppState.LoggedIn || !AppState.IsAdmin)
        {
            navManager.NavigateTo("/");
            return;
        }

        profile = await httpClient.GetFromJsonAsync<Profile>($"api/profile/{id}");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (profile.Birthday.HasValue)
            {
                profile.Birthday = profile.Birthday.Value.ToUniversalTime();
            }

            var response = await httpClient.PutAsJsonAsync($"api/profile/admin/{id}", profile);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Profile updated successfully.");
                navManager.NavigateTo("/admin-profile-list");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Error updating profile. Status: {response.StatusCode}, Content: {errorContent}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating profile. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception occurred while updating profile");
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }

    private void Cancel()
    {
        navManager.NavigateTo("/admin-profile-list");
    }
}
