@page "/admin-edit-profile/{id:int}"
@using DomainModels
@using Blazor.Services
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject IJSRuntime JSRuntime
@inject ILogger<AdminEditProfile> Logger

<h3>Admin Edit Profile</h3>

@if (!AppState.LoggedIn || !AppState.IsAdmin)
{
    <p>You do not have permission to access this page.</p>
}
else if (profile != null)
{
    <EditForm Model="@profile" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="profile.Name" class="form-control" />
        </div>

        <div>
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="profile.Email" class="form-control" />
        </div>

        <div>
            <label for="birthday">Birthday:</label>
            <InputDate id="birthday" @bind-Value="profile.Birthday" class="form-control" />
        </div>

        <div>
            <label for="address">Address:</label>
            <InputText id="address" @bind-Value="profile.Address" class="form-control" />
        </div>

        <div>
            <label for="phone">Phone Number:</label>
            <InputText id="phone" @bind-Value="profile.PhoneNumber" class="form-control" />
        </div>

        <div>
            <label for="administrator">Administrator:</label>
            <InputCheckbox id="administrator" @bind-Value="profile.Administrator" />
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
        <button type="button" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Profile? profile;

    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient("API");
    }

    private HttpClient httpClient;

    protected override async Task OnInitializedAsync()
    {
        if (!AppState.LoggedIn || !AppState.IsAdmin)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        profile = await httpClient.GetFromJsonAsync<Profile>($"api/profile/{id}");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (profile.Birthday.HasValue)
            {
                profile.Birthday = profile.Birthday.Value.ToUniversalTime();
            }

            var response = await httpClient.PutAsJsonAsync($"api/profile/admin/{id}", profile);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Profile updated successfully.");
                NavigationManager.NavigateTo("/admin-profile-list");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Error updating profile. Status: {response.StatusCode}, Content: {errorContent}");
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating profile. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception occurred while updating profile");
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin-profile-list");
    }
}
