@inject AppState AppState
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using DomainModels

<link href="css/bootstrap.min.css" rel="stylesheet" />
<link href="css/custom-styles.css" rel="stylesheet" />



<nav class="navbar navbar-expand-lg navbar-dark custom-navbar w-100">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <img src="/Maws-hoteller-photos/Sunset-Resort.png" alt="Logo" class="navbar-logo"/>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="navbar-text" aria-hidden="true"></span>Home
                    </NavLink>
                </li>
                @if (!AppState.IsAdmin)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="contact-support">
                            <span class="navbar-text" aria-hidden="true"></span> Support
                            </NavLink>
                        </li>
                    }

                @if (AppState.LoggedIn)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="ProfileDashboard">
                            <span class="navbar-text" aria-hidden="true"></span> Profile
                        </NavLink>
                    </li>
                    @if (AppState.IsAdmin)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="booking_dashboard">
                                <span class="navbar-text" aria-hidden="true"></span> Manageooking
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="admin-profile-list">
                                <span class="navbar-text" aria-hidden="true"></span> Manage Profiles
                            </NavLink>
                        </li>
                    }
                }
                
                <li class="nav-item">
                    <NavLink class="nav-link" @onclick="ModalChange">
                        <span class="navbar-text" aria-hidden="true"></span> Contact Support
                    </NavLink>
                </li>
            </ul>

            <!-- For at holde Login og Create Profile i højre side -->
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                @if (!AppState.LoggedIn)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="login">
                            <span class="navbar-text" aria-hidden="true"></span> Login
                        </NavLink>
                    </li>
                    
                    <li class="nav-item">
                        <NavLink class="nav-link" href="create-profile">
                            <span class="navbar-text" aria-hidden="true"></span> Signup
                        </NavLink>
                    </li>
                    
                }
                else
                {
                    <li class="nav-item">
                        <button class="nav-link btn btn-link" @onclick="Logout">
                            <span class="navbar-text" aria-hidden="true"></span> Logout
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@if (modal == true)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Contact support</h5>
                </div>
                <div class="modal-body">
                    <EditForm Model="@supportRequest" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="name">Name:</label>
                            <InputText id="name" @bind-Value="supportRequest.Name" class="form-control" placeholder="Name" />
                        </div>

                        <div class="form-group">
                            <label for="email">Email:</label>
                            <InputText id="email" @bind-Value="supportRequest.Email" class="form-control" placeholder="Email" />
                        </div>

                        <div class="form-group">
                            <label for="subject">Subject:</label>
                            <InputText id="subject" @bind-Value="supportRequest.Subject" class="form-control" placeholder="Subject" />
                        </div>

                        <div class="form-group">
                            <label for="message">Message:</label>
                            <InputTextArea id="message" @bind-Value="supportRequest.Message" class="form-control" placeholder="Message" />
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ModalChange">Close</button>
                    <button type="button" class="btn btn-success" @onclick="HandleValidSubmit">Submit</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        AppState.LoggedIn = false;
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }

    // Handle Contact support Modal
    private SupportRequest supportRequest = new SupportRequest();
    private string errorMessage = string.Empty;
    private bool modal = false;

    private void HandleValidSubmit()
    {
        try
        {
            dbService.AddSupportRequest(supportRequest);
            // Eventuelt feedback til brugeren om, at deres anmodning blev sendt.
            supportRequest = new SupportRequest(); // Reset formularen
            modal = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void ModalChange()
    {
        if (modal == true)
        {
            modal = false;
        }
        else
        {
            modal = true;
        }
    }
}